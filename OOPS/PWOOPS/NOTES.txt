Access Modifier ==>
public => Member can accessible from any class of any package
private => Member cannot be assesd from outsite the class body 
protected=>Member can accessible from any class of oun package but can't private
default => (NOt A KeyWord) default is when we did't write any thing public private or protected


Pillars Of OOPS
1 DataHiding  ====> private access Modifier
2 Abstraction ====> abstract Class and interface class
3 Encapcsulation ====>Encapcsulation = DataHiding + Abstraction
4 Polymorphism  ====> inheritence

Object in java 
is only made by new keyword 
Box b1;                       b1 is not a object
b1 = new Box()                b1 is Refrence Variable 

Box  b1 = new Box()



#inheritence 
=>the process of acquring the property and bheviours of one class is called inheritence
=>In,java inheritence can be archived in 2 forms 
a . IS - A(using extends Keyword)
b . HAS - A(Declaration  one ref Variable inside another class)

Example ===>

BASEclass/Parent Class /Superclass
class People {
   private String name;
   private  int age;
   private  String address;
}



/Derived class or Subclass or child Class
class Student extends People {
    private  int marks;
    private  String grade;
}



# What is Constructor ?
Ans - > Constructor is method , which has got the same name as a classname 
while a writing a  Constructor, we should not keep return type of Keyword
Constructor call automatically At the time when object Creation

///////////////////////////////////////////////////////////////////////////////////

# how many type of Constructor?
Ans - > a. 0 type Constructor
b. parameterized Constructor
c.Copy Constructor


Example of Constructor

class Student {
    private int roll ;
    private String Name;

    public Student(){
        // this zero or default Cunstructor
         Syso
    }

    public Student (int x ){
        Syso // this is a parameterized
    }

    public Student (Student s){//Copy Cunstructor
        roll = s.roll;
        name = s.name;
    }
}


Cunstructor inheritence :
class A{
        public A(){
            Syso("a");
        }
}
class B extends A{
    public B(){
        super();
        syso("b");
    }
}
public class test{
    public static void main(String args[]){
        B obj = new B();
    }
}


Qus.-> how many type of Variable in java
a => local = Variable Declarated in method and Class is local variable
b => instance = Variable Declared  inside the class but outside of the method 
c=> static Variable = Variable Declared inside the class but outside of the method with static Keyword


local => :memory in Stack area ,No defaut value  ,memory initialize at the time ,
class Calculator {
  // Add is Method and we declared var inside a Method 
    public void add(int a, int b) {
        int result = a + b;
        System.out.println("The Sum : " + result);
    }
}
public class LOCAL {

    public static void main(String[] args) {
        Calculator cal = new Calculator();
        cal.add(10, 20);
    }
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Static ==>  Static Memeber means it  belong to the type (class) itself and Not to the instance of that type
Static Keyword can be used in java as
Static Memeber Variables or static Variable
Static Method
Static blocks
Static class(Nested Class)

class Loan_APP {
    int x ; //instance variable
    //Static variable  or class variable are by defaut initialize to its defaut variable
    static float rateOfIntrest = 9.5f;

}

public class Static {

    public static void main(String[] args) {
        Loan_APP L = new Loan_APP();
        System.out.println(Loan_APP.rateOfIntrest);
    }
}

you can excess with static variable with class or object name

Loan_APP.rateOfIntrest

l.rateOfIntrest

Static Member=> sabse phele vo hi chlte hain  code me 
Example =>
Class Box{
    private static int b ;
    static{
        b = 1;
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#instance
==> memory in heap area ;
===>defaut value depending on datatype 
class Student  {
    //instance variabel************************main point*********************** defaut value jha mille 
    String name;
    int age;
    String address;
    int marks;
    String grade;

    // Constructor to initialize the fields
    public Student(String name, int age, String address, int marks, String grade) {
        this.name = name;
        this.age = age;
        this.address = address;
        this.marks = marks;
        this.grade = grade;
    }
    //Normal Method 
    // Method to display the details
    public void display() {  
        System.out.println("Name: " + name);
        System.out.println("Age: " + age);
        System.out.println("Address: " + address);
        System.out.println("Marks: " + marks);
        System.out.println("Grade: " + grade);
    }
}
in instance we aslo have initialized blocks
we know that the value of insatnce variable is zero in defaut 
so  we use this for example =>
class Student{
    private int rollno ;
    public Student() {
        SYSO("HELOO WORLD ")
    }
    public void setroll(int r){
        rollno =r;
    }
    {
        rollno = 5;
    }
}
////////////////////////////////////////////////////////////////////////
Based on the type of value holded by variables are 2 type 
1 is primitive => int a = 10;
2 is Refrenced => Student sd = new Student();
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                        Polymorphism
    QUS -> WHAT IS Polymorphism 
    ANS IS POLY MEANS - MANY
        MORPHISM MEAN -FORMS
                                        ARE 2 TYPES
    1 . Static Polymorphism ==> Method OVERLOADING 
                          EG  ==> Method Hidding

    2 . DYANAMIC Polymorphism ==>
                                EG=>Method OVERRIDING 


Method OVERLOADING 
++++++++++++++++++++++++++++++++++++
TWO METHOD IS SAID TO BE OVERLOADED ,IF BOTH THE METHOD HAVE SAME NAME BUT DIFFERENT ARGUMENTS TYPES.
In case of MethodOverloading ,compiler Will bind call to the method to the body of the method .
Jvm Should just Execute the method body, so we say MethodOverloading as "ComplieTimeBinding/Early TimeBinding"
One Person Doing Multiple Job (False)

CLASS Calculator{
    public void add(int a ,int b){
        System.out.println("int int argument");
    }
    public void add(int a ,int b,int c){
        System.out.println("int int argument");
    }
    public void add(float a ,float b){
        System.out.println("float float argument");
    }
    public void add(Double a ,Double b){
        System.out.println("Double Double argument");
    }

}

///////////////////////////////////
 var - args
 Example=>
 class Calculator {
    
    // Method for adding two integers
    public int add(int a, int b) {
        return a + b;
    }

    // Method for adding three integers
    public int add(int a, int b, int c) {
        return a + b + c;
    }

    // Method using varargs to add any number of integers var , args
    public int add(int... numbers) {
        int sum = 0;
        for (int num : numbers) {
            sum += num;
        }
        return sum;
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2.Method Hiding

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
B => DYANAMIC Polymorphism 
   1. OVERRIDING(abstract and interface class)
   during inheritence , the parent class method implementation would not match the need of child class 
   so child class will take method name ,but it will change the implementation as per need 



class Parent{
    public void property(){
        System.out.println("paisa");
    }
    public void marrige(){
        System.out.println("Relative GF");
    }
   }
   class Child{
    @Override
        public void marrige(){
            System.out.println("Any GF");
        }
   }
    
Example=>

class Plane {

    public void takeOff() {
        System.out.println("Plane take off");
    }

    public void fly() {
        System.out.println("Plane fly");
    }

    public void land() {
        System.out.println("Plane land");
    }
}

class Passenger_Plane extends Plane {

    @Override
        public void takeOff() {
        System.out.println("Passenger_Plane take off");
    }

    @Override
    public void fly() {
        System.out.println("Passenger_Plane fly");
    }

    @Override
    public void land() {
        System.out.println("Passenger_Plane land");
    }
}

class Cargo_Plane extends Plane {

    @Override
    public void takeOff() {
        System.out.println("Cargo_Plane take off");
    }

    @Override
    public void fly() {
        System.out.println("Cargo_Plane fly");
    }

    @Override
    public void land() {
        System.out.println("Cargo_Plane land");
    }
}

class Airport {

    public void Allowplane(Plane p) {
        p.takeOff();
        p.fly();
        p.land();
    }
}

public class Overriding {

    public static void main(String[] args) {
        Passenger_Plane p1 = new Passenger_Plane();
        Cargo_Plane c1 = new Cargo_Plane();
        Plane p = new Plane();  // Declare a plane object

        Airport a = new Airport();

        // Allow planes to perform their operations
        a.Allowplane(p1);  // Allow Passenger_Plane
        a.Allowplane(c1);  // Allow Cargo_Plane
        a.Allowplane(p);   // Allow regular Plane
    }
}

private<defaut<protrcted<public



////////////////////////////////////////////
Final 
class parent{
    public final void methodOne(){
        //it mean you can't Override 
        System.out.println("Method One");
    }
}
class CHILD{
    public void methodOne(){
        System.out.println("Method Child)//not use becasus final keyword is use in top
    }
}


/////////////////////////////////////////////
abstract 



class abstract` parent{
    public abstract void methodOne();
        //abstract it mean you can't use the methodOne functionality but you can use method 
        
    }

class CHILD{
    public void methodOne(){
        System.out.println("Method Child)//not use becasus abstrxt keyword is use in parent class 
        if they use abstract keyword in method automatically class will be abstract
    }
}



//////////////////////////////////////////////////////////////////////////////////////////////////

In  Java Abstraction can be Achieved using 
a -> abstract Class 
b -> interface
In real World for few case object should not be Created , to handle in java we need go for a Keyword  called "Abstraction"


abstract access Modifier =>
1 Class =  yes we can use in class , but if we can make class as abstrxt then object can't be initialize
2 Method = yes we can use in class , but if we can make Method  as abstract then body can't give body for method
3 Variable = no we can't abstract at variable

Example For abstract Class
Rule ===:>
#agar aap kisi bi method ko abstract krte ho to apko class ko bi abstract krna pdhe ga 
abstract Exposing the set of Service but Hiding the internal implementation

# for An abstract class we can created a reference , but not the object 

/////////////////////////////////////////////////////////////////

abstract class person {
    String name ;
    int age ;
    float height;

    person(String name,int age ,float height){
        this.name=name;
        this.age=age;
        this.height=height;
    }
}
//to call parameterized Constructor of parent from child class
class Student extends person{
    int marks ;
    float avg;
    Student(String name ,int age,float height, int marks,float avg){
        Super(name,age,height);
        this.marks = marks;
        this.avg=avg;
    }
    public void display(){
        System.out.println(name);
        System.out.println(age);
        System.out.println(height);
        System.out.println(marks);
        System.out.println(avg);
    }
}
public class Test{
    public static void main(){
        Student student = new Student("prince",19,6.1f,100,100.0f);
        student.display();
    }
}

Qus-> can we create an object from abstract class
ans -> No

QUS->When will the Constructor gets called?
Ans-> During the Creation Of an object

QUS->Does abstract class has Constructor?
Ans->yes

Qus->why we need Constructor is abstract class , when we can't instantiate an object
ans-> To get the property of parent class to child class  we need Constructor in abstract class also  .

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

If You Want Interface in code 

Basic Example =>
interface ICalculator
{
    //public abstract
    void add(int a,int b);
    void sub(int a,int b);
    void mul(int a,int b);
    void div(int a,int b);
}

Interface Should be Implemented by Class
Which Ever Class is implements an interface that class should compulsoriy give the body for all the abstract method present in the interface
=> if the implementation class fails to give the body for atleast one abstract method then that class would  be become abstract

interface ICalculator
{
    //public abstract
    void add(int a,int b);
    void sub(int a,int b);
    void mul(int a,int b);
    void div(int a,int b);
}
abstract class CalculatorImp implements ICalculator{

     public void add(int a ,int b){
        Syso(a+b);
    }
    
    public void sub(int a ,int b){
        Syso(a-b);
    }
}

extend vs implements
++++++++++++++++++++++++++++++++++++++++++++++
a . A class can extend only from one class at a time
ex ->
class one{
    public void method(){}
}
class two extends one {
    public void methodTwo(){}
}
b.-> A interface can many interface from implementation 
ex -> 2 

interface Calculator{
    int add(int a , int b);
    int sub(int a ,int b );
}

interface  CalculatorAdvance{
    int mul(int a,int b);
    int div(int a,int b);
}

class CalculatorImp implements Calculator,CalculatorAdvance{
    public void add(int a ,int b){
        Syso(a+b);
    }
    
    public void sub(int a ,int b){
        Syso(a-b);
    }

}

class - > interface   ===> implementation
class - > class       ===> extends
interface - > interface===> extends

interface you can write a variable yes 
//public static final 
example = > 
inteface sound {
    int max = 0;
    int  min  = 0;
}


if static use nameclass name 
interface Idemo{
    int x = 10
}
public class Test implementation Idemo{
    public static void main(){
        int x = 100;
        System.out.println(x);
        System.out.println(Idemo.x);
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Package ==>
are nothing  more than the way we organize file into different directories according to their functionality,usability as well 
as category they should belong too


if we do from trminal command is 
javac helloworld.java
javac -d . helloworld.java //to  create package


///////////////////////
this and Super


this function is reference of current and parent class and Super only call paerent of class 


Class A {
    public void f1(){
        System.out.println("F1");
    }

    int x; //instance
    public void addfunc(int x){
        this.x=x        //this.x is instance and x is local 
    }

}
Class B{
     public void f2(){
        System.out.println("F2");
        this.f1;
        this.f2;
        but Super can call only parent 
        super.f1()
    }
}